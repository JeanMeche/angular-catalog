/**
 * PCB API
 * This Web site allows you to learn and test our PCB API.  **What’s new**:   * **Content: GET {cultureCode}/{oid}/contents : Add fallback for LNK content type: generate LNK data for level 5 oid from their filtered level 7**   * Add new option “exactSearch” for the endpoint Catalog : GET /{cultureCode}/search/autocomplete/{term}      * Add new option “fallback” to improve research on ppimage4online for endpoint :    * Content: GET /{cultureCode}/{oid}/ppimage4online    * Content: POST /{cultureCode}/oids/ppimage4online    * Content type HST returns new field “crestSort” to specify if a companion is Top Recommended for an Host’s product (we recommend to use ‘crestsort’ instead of ‘recommended’)   * Content type HST returns new fields “level5oid”, “level5name” for each Host’s Product to provide Series\' information   * Content type HST returns new branches with the list of Host Series (option: ShowHostSeries): HST_SERIES_OIDS and HST_SERIES    * Add new parameter “hidePath” and “filter” for endpoints: * Content: POST /{cultureCode}/products/contents * Content: POST /{cultureCode}/oids/contents   * Content type LNK returns new field “crestSort” to specify if the companion is Top recommended or not   * Retrieve the primary product image for online purpose * Content: GET /{cultureCode}/{oid}/ppimage4online * Content: POST /{cultureCode}/oids/ppimage4online   * *AUTOCOMPLETE works with localized prodname*  * *Content type VID provides Video – Animation in addition of Video corporate and Product Overview*  * New API route * Content: POST /{cultureCode}/oids/contents returns the contents of multiple node according to given cultureCode, statuses and content types  * Provide Product Line information at SKU Level  * Provide PLC information on product for all catalogues:  * Content: GET /{cultureCode}/{oid}/contents (contentType: MDA) * Content: GET /{cultureCode}/products/{productNumber}/contents (contentType: MDA)  * Catalog: GET /{cultureCode}/search/autocomplete/{term} add new parameters ‘productPatterns’, ‘includedBranchHeadOids’, ‘excludedBranchHeadOids’  * Catalog: GET /{cultureCode}/{oid}/productNumbers add new parameter ‘productPatterns’  * Add new type of content (RC) Recommended Companions for: * Catalog: GET /{cultureCode}/{oid}/contents * Catalog: GET /{cultureCode}/products/{productNumber}/contents  **Requests identification & authorization**:  All the requests to the PCB API *must* be identified using at least one token. There are two kinds of tokens:  * The **Application Token** which helps to identity which application is using the API (e.g. PCB, Swagger, ...). This token, if present, must be put in the `X-Application-Token` HTTP header for each request made to the API. In order to connect your application to the API, you need an application token. You can request one at http://hppcb.freshdesk.com/support/home * The **User Token** which are specific to user, whatever application they\'re using. The token contains user information + active permissions, for instance the right to see pre-release products. These tokens are conventionally not disclosed to the end users, but rather used by applications (e.g. via a login form). This token, if present, must be put in the `Authentication` HTTP header for each request, using the [Bearer Authentication](https://swagger.io/docs/specification/authentication/bearer-authentication) convention. If you hold your user token, you can use it in Swagger using the *\"Authorize\"* button (referred as \'api_key)\'.   The API will refuse any request that: * Does not hold any application **or** user token. * Provide tokens that are malformed, invalid or expired.  Through this swagger web site, you **should not use a token application** (swagger has its own).  **In Case of problem to access PCB API**, please submit a ticket through the URL:  http://hppcb.freshdesk.com/support/tickets/new  **Information about common types**: * **Node status** (updated once a day)  * L (Live)  * O (Obsolete)  * F (Future/pre-released)  * **Culture code / Catalog** :  * matches __[a-z]{2}-[a-z]{2}__.  e.g. ww-en, us-en,... Full list at **_/catalogs**  * **Content type**  * MSG (messaging)  * TSP (tech specs)  * SYS (system)  * LOG  * PIC  * OTH  * IMG (images urls, with metadatas)   * DOC (documents urls like TechSpecs, ...)   * LNK (linked products, compatibilities, ...)   * HST (companion\'s hosts)   * VID (videos)   * RAT (Ratings Data)   * MDA (Meta Data, PLC Date)    * RC (Recommended Companions)  * **Hierarchy paradigm**  * Q, Quick : **Level1/Product Category** -> **Level5/Serie** -> **Level7/SKU**  * F, Full: All levels
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { TermbaseBE } from '../model/termbase';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


export interface LabelsContainersCultureCodeGetRequestParams {
    cultureCode: string;
    contentType: Set<'TSP' | 'MSG' | 'SYS' | 'LOG' | 'PIC' | 'OTH'>;
}

export interface LabelsContainersGetRequestParams {
    contentType: Set<'TSP' | 'MSG' | 'SYS' | 'LOG' | 'PIC' | 'OTH'>;
}

export interface LabelsCultureCodeTermsbaseTermGetRequestParams {
    cultureCode: string;
    term: string;
}


@Injectable({
  providedIn: 'root'
})
export class GeneralService {

    protected basePath = 'https://pcbapi.inc.hp.com/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Get translated container labels
     * Get all the translated container labels of the given content types into given culture code. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public labelsContainersCultureCodeGet(requestParameters: LabelsContainersCultureCodeGetRequestParams, observe?: 'body', reportProgress?: boolean, requestOptions?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<{ [key: string]: { [key: string]: string; }; }>;
    public labelsContainersCultureCodeGet(requestParameters: LabelsContainersCultureCodeGetRequestParams, observe?: 'response', reportProgress?: boolean, requestOptions?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<{ [key: string]: { [key: string]: string; }; }>>;
    public labelsContainersCultureCodeGet(requestParameters: LabelsContainersCultureCodeGetRequestParams, observe?: 'events', reportProgress?: boolean, requestOptions?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<{ [key: string]: { [key: string]: string; }; }>>;
    public labelsContainersCultureCodeGet(requestParameters: LabelsContainersCultureCodeGetRequestParams, observe: any = 'body', reportProgress: boolean = false, requestOptions?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const cultureCode = requestParameters.cultureCode;
        if (cultureCode === null || cultureCode === undefined) {
            throw new Error('Required parameter cultureCode was null or undefined when calling labelsContainersCultureCodeGet.');
        }
        const contentType = requestParameters.contentType;
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling labelsContainersCultureCodeGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (contentType) {
            contentType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'contentType[]');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = requestOptions && requestOptions.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = requestOptions && requestOptions.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<{ [key: string]: { [key: string]: string; }; }>(`${this.configuration.basePath}/labels/containers/${encodeURIComponent(String(cultureCode))}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get container names
     * Get all the container names of the given content types. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public labelsContainersGet(requestParameters: LabelsContainersGetRequestParams, observe?: 'body', reportProgress?: boolean, requestOptions?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<{ [key: string]: { [key: string]: string; }; }>;
    public labelsContainersGet(requestParameters: LabelsContainersGetRequestParams, observe?: 'response', reportProgress?: boolean, requestOptions?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<{ [key: string]: { [key: string]: string; }; }>>;
    public labelsContainersGet(requestParameters: LabelsContainersGetRequestParams, observe?: 'events', reportProgress?: boolean, requestOptions?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<{ [key: string]: { [key: string]: string; }; }>>;
    public labelsContainersGet(requestParameters: LabelsContainersGetRequestParams, observe: any = 'body', reportProgress: boolean = false, requestOptions?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const contentType = requestParameters.contentType;
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling labelsContainersGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (contentType) {
            contentType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'contentType[]');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = requestOptions && requestOptions.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = requestOptions && requestOptions.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<{ [key: string]: { [key: string]: string; }; }>(`${this.configuration.basePath}/labels/containers`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a translated term for a culture code     
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public labelsCultureCodeTermsbaseTermGet(requestParameters: LabelsCultureCodeTermsbaseTermGetRequestParams, observe?: 'body', reportProgress?: boolean, requestOptions?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<TermbaseBE>;
    public labelsCultureCodeTermsbaseTermGet(requestParameters: LabelsCultureCodeTermsbaseTermGetRequestParams, observe?: 'response', reportProgress?: boolean, requestOptions?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<TermbaseBE>>;
    public labelsCultureCodeTermsbaseTermGet(requestParameters: LabelsCultureCodeTermsbaseTermGetRequestParams, observe?: 'events', reportProgress?: boolean, requestOptions?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<TermbaseBE>>;
    public labelsCultureCodeTermsbaseTermGet(requestParameters: LabelsCultureCodeTermsbaseTermGetRequestParams, observe: any = 'body', reportProgress: boolean = false, requestOptions?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const cultureCode = requestParameters.cultureCode;
        if (cultureCode === null || cultureCode === undefined) {
            throw new Error('Required parameter cultureCode was null or undefined when calling labelsCultureCodeTermsbaseTermGet.');
        }
        const term = requestParameters.term;
        if (term === null || term === undefined) {
            throw new Error('Required parameter term was null or undefined when calling labelsCultureCodeTermsbaseTermGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = requestOptions && requestOptions.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = requestOptions && requestOptions.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<TermbaseBE>(`${this.configuration.basePath}/labels/${encodeURIComponent(String(cultureCode))}/termsbase/${encodeURIComponent(String(term))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
