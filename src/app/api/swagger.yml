openapi: 3.0.1
info:
  title: PCB API
  description: "This Web site allows you to learn and test our PCB API.\n\n**What’\
    s new**:\n\n * **Content: GET {cultureCode}/{oid}/contents : Add fallback for\
    \ LNK content type: generate LNK data for level 5 oid from their filtered level\
    \ 7** \n * Add new option “exactSearch” for the endpoint Catalog : GET /{cultureCode}/search/autocomplete/{term}\n\
    \n \n\n * Add new option “fallback” to improve research on ppimage4online for\
    \ endpoint :\n   * Content: GET /{cultureCode}/{oid}/ppimage4online\n   * Content:\
    \ POST /{cultureCode}/oids/ppimage4online \n\n * Content type HST returns new\
    \ field “crestSort” to specify if a companion is Top Recommended for an Host’\
    s product (we recommend to use ‘crestsort’ instead of ‘recommended’)\n\n * Content\
    \ type HST returns new fields “level5oid”, “level5name” for each Host’s Product\
    \ to provide Series' information\n\n * Content type HST returns new branches with\
    \ the list of Host Series (option: ShowHostSeries): HST_SERIES_OIDS and HST_SERIES\
    \  \n * Add new parameter “hidePath” and “filter” for endpoints:\n* Content: POST\
    \ /{cultureCode}/products/contents\n* Content: POST /{cultureCode}/oids/contents\
    \ \n * Content type LNK returns new field “crestSort” to specify if the companion\
    \ is Top recommended or not \n * Retrieve the primary product image for online\
    \ purpose\n* Content: GET /{cultureCode}/{oid}/ppimage4online\n* Content: POST\
    \ /{cultureCode}/oids/ppimage4online \n * *AUTOCOMPLETE works with localized prodname*\n\
    \ * *Content type VID provides Video – Animation in addition of Video corporate\
    \ and Product Overview*\n * New API route\n* Content: POST /{cultureCode}/oids/contents\
    \ returns the contents of multiple node according to given cultureCode, statuses\
    \ and content types\n * Provide Product Line information at SKU Level\n * Provide\
    \ PLC information on product for all catalogues: \n* Content: GET /{cultureCode}/{oid}/contents\
    \ (contentType: MDA)\n* Content: GET /{cultureCode}/products/{productNumber}/contents\
    \ (contentType: MDA)\n * Catalog: GET /{cultureCode}/search/autocomplete/{term}\
    \ add new parameters ‘productPatterns’, ‘includedBranchHeadOids’, ‘excludedBranchHeadOids’\
    \n * Catalog: GET /{cultureCode}/{oid}/productNumbers add new parameter ‘productPatterns’\
    \n * Add new type of content (RC) Recommended Companions for:\n* Catalog: GET\
    \ /{cultureCode}/{oid}/contents\n* Catalog: GET /{cultureCode}/products/{productNumber}/contents\n\
    \n**Requests identification & authorization**:\n\nAll the requests to the PCB\
    \ API *must* be identified using at least one token. There are two kinds of tokens:\n\
    \n* The **Application Token** which helps to identity which application is using\
    \ the API (e.g. PCB, Swagger, ...). This token, if present, must be put in the\
    \ `X-Application-Token` HTTP header for each request made to the API. In order\
    \ to connect your application to the API, you need an application token. You can\
    \ request one at http://hppcb.freshdesk.com/support/home\n* The **User Token**\
    \ which are specific to user, whatever application they're using. The token contains\
    \ user information + active permissions, for instance the right to see pre-release\
    \ products. These tokens are conventionally not disclosed to the end users, but\
    \ rather used by applications (e.g. via a login form). This token, if present,\
    \ must be put in the `Authentication` HTTP header for each request, using the\
    \ [Bearer Authentication](https://swagger.io/docs/specification/authentication/bearer-authentication)\
    \ convention. If you hold your user token, you can use it in Swagger using the\
    \ *\"Authorize\"* button (referred as 'api_key)'.\n\n\nThe API will refuse any\
    \ request that:\n* Does not hold any application **or** user token.\n* Provide\
    \ tokens that are malformed, invalid or expired.\n\nThrough this swagger web site,\
    \ you **should not use a token application** (swagger has its own).\n\n**In Case\
    \ of problem to access PCB API**, please submit a ticket through the URL:\n\n\
    http://hppcb.freshdesk.com/support/tickets/new\n\n**Information about common types**:\n\
    * **Node status** (updated once a day)\n * L (Live)\n * O (Obsolete)\n * F (Future/pre-released)\
    \ \n* **Culture code / Catalog** :\n * matches __[a-z]{2}-[a-z]{2}__.  e.g. ww-en,\
    \ us-en,... Full list at **/catalogs** \n* **Content type**\n * MSG (messaging)\n\
    \ * TSP (tech specs)\n * SYS (system)\n * LOG\n * PIC\n * OTH\n * IMG (images\
    \ urls, with metadatas) \n * DOC (documents urls like TechSpecs, ...) \n * LNK\
    \ (linked products, compatibilities, ...) \n * HST (companion's hosts) \n * VID\
    \ (videos) \n * RAT (Ratings Data) \n * MDA (Meta Data, PLC Date)  \n * RC (Recommended\
    \ Companions) \n* **Hierarchy paradigm**\n * Q, Quick : **Level1/Product Category**\
    \ -> **Level5/Serie** -> **Level7/SKU**\n * F, Full: All levels"
  version: 1.0.0
servers:
- url: https://pcbapi.inc.hp.com/api
tags:
- name: general
  description: Information on content model
- name: catalog
  description: Catalog-level operations like catalogs list, check node, get node children,
    search node,..
- name: contents
  description: Node-level content listing operations
- name: ratings
  description: Ratings and reviews data
paths:
  /catalogs:
    get:
      tags:
      - catalog
      summary: List existing catalogs (culture codes)
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCollection'
              example:
                ww-en:
                  id: 5
                  cultureCode: ww-en
                  name: WW EN
                  textDirection: ltr
                  countryId: 2
                  countryCode: WW
                us-en:
                  id: 4
                  cultureCode: us-en
                  name: United States
                  textDirection: ltr
                  countryId: 51
                  countryCode: US
                na-en:
                  id: 3
                  cultureCode: na-en
                  name: North America Region
                  textDirection: ltr
                  countryId: 1
                  countryCode: NA
                ae-ar:
                  id: 285
                  cultureCode: ae-ar
                  name: Arabic (United Arab Emirate)
                  textDirection: rtl
                  countryId: 265
                  countryCode: AE
  /labels/containers:
    get:
      tags:
      - general
      summary: Get container names
      description: |
        Get all the container names of the given content types.
      parameters:
      - name: contentType[]
        in: query
        required: true
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - TSP
            - MSG
            - SYS
            - LOG
            - PIC
            - OTH
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsCollection'
              example:
                TSP:
                  coursedes_01_long: Course Description 01 (long)
                  coursereqmt_01_long: Course Requirements 01 (long)
                  coursereqmt_02_long: Course Requirements 02 (long)
                  coursereqmt_03_long: Course Requirements 03 (long)
                  coursereqmt_04_long: Course Requirements 04 (long)
                  coursereqmt_05_long: Course Requirements 05 (long)
                  expectedoutcome_01_long: Expected Outcome 01 (long)
                MSG:
                  dslegaltagline: Legal Tagline For Datasheets
                  datasheettitle: Datasheet Title
                  prodline: Product Line
                  prodmgr: Product Manager
                  prodbrandname: Product Brand Name
  /labels/containers/{cultureCode}:
    get:
      tags:
      - general
      summary: Get translated container labels
      description: |
        Get all the translated container labels of the given content types into given culture code.
      parameters:
      - name: cultureCode
        in: path
        required: true
        schema:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
      - name: contentType[]
        in: query
        required: true
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - TSP
            - MSG
            - SYS
            - LOG
            - PIC
            - OTH
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsCollection'
              example:
                TSP:
                  wrntyfeatures: Garantie
                  dynamicload: Charge dynamique
                  opticaldriveavail: Lecteur optique
                SYS:
                  uci: Informations UCI
                  rohs: RoHS
                  replacemntprodnum: Référence du produit de remplacement
                  codesignation: Dénomination de l'entreprise
                  prod4publisher: Editeur produit
                LOG:
                  logotechprnt1: Logo de la technologie, impression 1
                  logotechprnt2: Logo de la technologie, impression 2
                  logotechprnt3: Logo de la technologie, impression 3
                PIC:
                  photods14: Photo 14 de la fiche technique
                  dssocmedimg_03: Image de médias sociaux de la fiche technique
                  featphotods14: Fiche technique - Photo de fonctionnalité 14
                OTH:
                  diff_04_medium: Déclaration de différenciation
  /labels/{cultureCode}/termsbase/{term}:
    get:
      tags:
      - general
      description: "Gets a translated term for a culture code    \n"
      parameters:
      - name: cultureCode
        in: path
        required: true
        schema:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
      - name: term
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Translated terms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Termbase'
  /{cultureCode}/{oid}/contents:
    get:
      tags:
      - contents
      summary: Get contents for a single node
      parameters:
      - name: cultureCode
        in: path
        required: true
        schema:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
      - name: oid
        in: path
        required: true
        schema:
          type: string
      - name: contentType[]
        in: query
        required: true
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - TSP
            - MSG
            - SYS
            - LOG
            - PIC
            - IMG
            - DOC
            - OTH
            - LNK
            - HST
            - VID
            - RAT
            - MDA
            - RC
      - name: status[]
        in: query
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - L
            - O
            - F
      - name: options[]
        in: query
        description: "Optional.\n\nshowHostsSeries: \n- applicable for HST content\
          \ type only\n- use it to list series informations for HST"
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - showHostSeries
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInCultureWithContent'
      security:
      - Bearer: []
  /{cultureCode}/products/{productNumber}/contents:
    get:
      tags:
      - contents
      summary: Get contents for a single product
      parameters:
      - name: cultureCode
        in: path
        required: true
        schema:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
      - name: productNumber
        in: path
        required: true
        schema:
          pattern: ^[-a-zA-Z0-9_.+]*$
          type: string
      - name: contentType[]
        in: query
        required: true
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - TSP
            - MSG
            - SYS
            - LOG
            - PIC
            - IMG
            - DOC
            - OTH
            - LNK
            - HST
            - VID
            - RAT
            - MDA
            - RC
      - name: status[]
        in: query
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - L
            - O
            - F
      - name: options[]
        in: query
        description: "Optional.\n\nshowHostsSeries: \n- applicable for HST content\
          \ type only\n- use it to list series informations for HST"
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - showHostSeries
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInCultureWithContent'
      security:
      - Bearer: []
  /{cultureCode}/{oid}/translatedContents:
    get:
      tags:
      - contents
      summary: Get contents from multiple catalogs
      description: |
        Gets contents (of given contentTypes) for the given node (oid) (exstining in the given cultureCode and statuses) translated into given cultureCodes. Status of node in target catalogs is not checked
      parameters:
      - name: cultureCode
        in: path
        required: true
        schema:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
      - name: oid
        in: path
        required: true
        schema:
          type: string
      - name: contentType[]
        in: query
        required: true
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - TSP
            - MSG
            - SYS
            - LOG
            - PIC
            - OTH
      - name: status[]
        in: query
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - L
            - O
            - F
      - name: cultureCodes[]
        in: query
        required: true
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            pattern: ^([a-z]{2}-[a-z]{2})$
            type: string
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeWithTranslatedContents'
  /{cultureCode}/{oid}/ppimage4online:
    get:
      tags:
      - contents
      summary: Get primary product image for online purpose for a single node
      parameters:
      - name: cultureCode
        in: path
        required: true
        schema:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
      - name: oid
        in: path
        required: true
        schema:
          type: string
      - name: status[]
        in: query
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - L
            - O
            - F
      - name: options[]
        in: query
        description: "Optional.\n\nfallback: \n- Apply fallback rules when no image\
          \ is available for the selected OID\nIf product (level 7) then search image\
          \ on the parent (level 6) and other similar products\nIf level 6, 5 and\
          \ 4 then search image on associated products"
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - fallback
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInCultureWithContent'
              example:
                results:
                - oid: 6341976
                  metadata:
                    name: c03928701.png
                    fullTitle: HP 10W Tablet PC USB AC Adapter
                    contentType: png
                    dpiResolution: 72
                    background: Transparent
                    orientation: Center facing
                    pixelHeight: 430
                    pixelWidth: 573
                    imageUrlHttp: http://product-images.www8-hp.com/digmedialib/prodimg/lowres/c03928701.png
                    imageUrlHttps: https://ssl-product-images.www8-hp.com/digmedialib/prodimg/lowres/c03928701.png
                    fileSize: 67096
                    disclosureLevel: Public
                  image_urls:
                    http: http://product-images.www8-hp.com/digmedialib/prodimg/lowres/c03928701.png
                    https: https://ssl-product-images.www8-hp.com/digmedialib/prodimg/lowres/c03928701.png
                noResult: []
      security:
      - Bearer: []
  /{cultureCode}/products/contents:
    post:
      tags:
      - contents
      summary: Get contents for multiple SKUs
      description: |
        Returns the contents of multiple sku according to given cultureCode, statuses and content types.
      parameters:
      - name: cultureCode
        in: path
        required: true
        schema:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
      - name: status[]
        in: query
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - L
            - O
            - F
      - name: contentType[]
        in: query
        required: true
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - TSP
            - MSG
            - SYS
            - LOG
            - PIC
            - IMG
            - DOC
            - OTH
            - RAT
            - MDA
      - name: hidePath
        in: query
        description: Enable to remove hierarchy of a product (path block)
        schema:
          type: boolean
          default: false
      - name: filter[]
        in: query
        description: "Optional. If you specify a filter for one content type you need\
          \ to specify for all selected content types. \n Path starts from the content\
          \ block. Separator for level is the pipe symbol |. Wildcard can be used\
          \ (ex: MSG|headline\\* returns content for all fields with name starts with\
          \ headline) (ex: MSG|\\* returns all content type data for MSG)"
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - productNumbers[]
              properties:
                productNumbers[]:
                  type: array
                  items:
                    type: string
        required: true
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SKU_NodeInCultureWithContent_object'
  /{cultureCode}/oids/contents:
    post:
      tags:
      - contents
      summary: Get contents for multiple nodes
      description: |
        Returns the contents of multiple node according to given cultureCode, statuses and content types.
      parameters:
      - name: cultureCode
        in: path
        required: true
        schema:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
      - name: status[]
        in: query
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - L
            - O
            - F
      - name: contentType[]
        in: query
        required: true
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - TSP
            - MSG
            - SYS
            - LOG
            - PIC
            - IMG
            - DOC
            - OTH
            - RAT
            - MDA
      - name: hidePath
        in: query
        description: Enable to remove hierarchy of a product (path block)
        schema:
          type: boolean
          default: false
      - name: filter[]
        in: query
        description: "Optional. If you specify a filter for one content type you need\
          \ to specify for all selected content types. \n Path starts from the content\
          \ block. Separator for level is the pipe symbol |. Wildcard can be used\
          \ (ex: MSG|headline\\* returns content for all fields with name starts with\
          \ headline) (ex: MSG|\\* returns all content type data for MSG)"
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - oids[]
              properties:
                oids[]:
                  type: array
                  items:
                    type: integer
        required: true
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SKU_NodeInCultureWithContent_object'
  /{cultureCode}/{oid}/children:
    get:
      tags:
      - catalog
      summary: List children of a node
      description: Get children of given node (oid) in given catalog, with given statuses.
      parameters:
      - name: cultureCode
        in: path
        required: true
        schema:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
      - name: oid
        in: path
        required: true
        schema:
          type: string
      - name: status[]
        in: query
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - L
            - O
            - F
      - name: hierarchyParadigm
        in: query
        required: true
        schema:
          type: string
          enum:
          - F
          - Q
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInCultureWithChildren'
              example:
                oid: 10251633
                cultureCode: ww-en
                name: HP 14 Women Canvas Tote
                level: 5
                status:
                - L
                children:
                - oid: 10251654
                  cultureCode: ww-en
                  name: HP 14 Red/Brown Women Canvas Tote
                  level: 7
                  productNumber: V1M57AA
                  status:
                  - L
                - oid: 10251657
                  cultureCode: ww-en
                  name: HP 14 Black Women Canvas Tote
                  level: 7
                  productNumber: V1M56AA
                  status:
                  - L
                - oid: 10251660
                  cultureCode: ww-en
                  name: HP 14 Grey/Brown Women Canvas Tote
                  level: 7
                  productNumber: V1M58AA
                  status:
                  - L
  /{cultureCode}/{oid}/productNumbers:
    get:
      tags:
      - catalog
      summary: List product numbers belonging the a given branch
      description: "Get the products numbers located in the catalog branch whose tip\
        \ is the given node, with given statuses. \n\nUse the productPatterns parameter\
        \ to restrict ** level 7 nodes ** by regular expressions on their product\
        \ number (all of them). Expressions can be negated in order to exclude certain\
        \ products \n* E.g. Dummy products have prodnum starting with 'DUM' : '__DUM.*__'\
        \ include all of them \n* E.g. Refurbish products have prodnum finishing with\
        \ an 'R': '__.*R__' exclude all of them \n* E.g. CTO products have prodnum\
        \ finishing with 'AV' : '__.*AV__' include all of them \n* E.g. PCCS SKUs\
        \ where prodnum is ending by: UP, UC, US , EP, EC, ES, LP, LC, LS, PP, PC,\
        \ PS : '__~(.*[UELP][PCS])__' exlude all of them \n* E.g. Using both '__~(K.*\
        \ )__' and '__.{9}__ ' will return only level 7 nodes with product numbers\
        \ of 9 chars and not starting with 'K'."
      parameters:
      - name: cultureCode
        in: path
        required: true
        schema:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
      - name: oid
        in: path
        required: true
        schema:
          type: string
      - name: status[]
        in: query
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - L
            - O
            - F
      - name: pageNumber
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
      - name: productPatterns[]
        in: query
        description: "A list of regular expressions that restrict level 7 term-matching\
          \ nodes to the ones with product number matching one of the expressions.\
          \ \n\nE.g.: (DUM.*) include all level 7 nodes with product number starting\
          \ with \"DUM\" \n\n~(DUM.*) excludes all level 7 nodes with product number\
          \ starting with \"DUM\""
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeProducts'
              example:
                lastModificationDate: 2017-07-25T15:24:26.148Z
                totalResult: 281414
                pageNumber: 8
                pageSize: 500
                productNumbers:
                - PRODNUM1
                - PRODNUM2
                - PRODNUM3
                - PRODNUM4
                - '...'
                - PRODNUM500
  /{cultureCode}/search/autocomplete/{term}:
    get:
      tags:
      - catalog
      summary: Search for Series/SKU
      description: "Term-based search of Series and SKUs in given catalog with given\
        \ statuses. Terms can match on Series names and/or codenames on Series Level\
        \ (Level 5) and product name and product number (Level7). Level 5 (Series)\
        \ are returned first.\n\n We can now search on prodname in **non-English**\
        \ languages. \n\n Following parameters helps in overfiltering term-matching\
        \ nodes: \n* Use exactSearch = “true” to not consider the “space” character\
        \ as a delimiter in the term\n(eg: with the string ‘HP 80’, PCB is searching\
        \ Series/SKUs containing “HP 80” for the selected SearchModes)\nIf exactSearch\
        \ = “false” or not used at all (backward compatibility), the “space” character\
        \ is considered as a delimiter (eg: with the string ‘HP 80’, PCB is searching\
        \ all Series/SKUs containing “HP” and “80” for the selected SearchModes)\n\
        \ \n* Use the includedBranchHeadOids parameter to restrict the search to a\
        \ particular set of branches of the hierachy \n* Use the exludedBranchHeadOids\
        \ parameter to exclude a set of branches of the hierachy. This exclusion has\
        \ a **higest priority** than includedBranchHeadOids \n* Use the productPatterns\
        \ parameter to restrict ** level 7 nodes ** by regular expressions on their\
        \ product number (all of them). Expressions can be negated in order to exclude\
        \ certain products \n  * E.g. Dummy products have prodnum starting with 'DUM'\
        \ : '__DUM.*__' include all of them \n  * E.g. Refurbish products have prodnum\
        \ finishing with an 'R': '__~(.*R)__' exclude all of them \n  * E.g. CTO products\
        \ have prodnum finishing with 'AV' : '__.*AV__'  include all of them \n  *\
        \ E.g. PCCS SKUs where prodnum is ending by: UP, UC, US , EP, EC, ES, LP,\
        \ LC, LS, PP, PC, PS : '__~(.*[UELP][PCS])__' exclude all of them \n  * E.g.\
        \ Using both '~(__K.*__)' and '__.{9}__' will return only level 7 nodes with\
        \ product numbers of 9 chars and not starting with 'K' \n\n  This does not\
        \ affect the level 5 nodes filter. \n* Use the excludeEmptySeries to exclude\
        \ or not the empty series from the result \n\nFollowing parameter helps to\
        \ provide additional information: \n* Use the searchOnTranslatedName to retrieve\
        \ localized prodname in addition of the english prodname"
      parameters:
      - name: cultureCode
        in: path
        required: true
        schema:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
      - name: term
        in: path
        required: true
        schema:
          type: string
      - name: status[]
        in: query
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - L
            - O
            - F
      - name: searchModes[]
        in: query
        required: true
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - product
            - codename
      - name: excludedBranchHeadOids[]
        in: query
        description: A list of parent OIDs to exclude. When a term-matching node is
          <i>under</i> one of the given OIDs, it is excluded. This parameters has
          a high priority than includedBranchHeadOids
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
      - name: includedBranchHeadOids[]
        in: query
        description: A list of parent OIDs to restrict too. When a term-matching node
          is <i>under</i> one of the given OIDs, it is included (except if excluded
          due to excludedBranchHeadOids)
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
      - name: productPatterns[]
        in: query
        description: "A list of regular expressions that restrict level 7 term-matching\
          \ nodes to the ones with product number matching one of the expressions.\
          \ \n\nE.g.: (DUM.*) include all level 7 nodes with product number starting\
          \ with \"DUM\" \n\n~(DUM.*) excludes all level 7 nodes with product number\
          \ starting with \"DUM\""
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: searchLimit
        in: query
        required: true
        schema:
          type: integer
      - name: excludeEmptySeries
        in: query
        description: Enable to exclude empty series
        schema:
          type: boolean
          default: true
      - name: searchOnTranslatedName
        in: query
        description: Enable to search on default name ww-en (no parameter or false),
          or on translated name linked to culture code (true)
        schema:
          type: boolean
          default: false
      - name: exactSearch
        in: query
        description: Set the exactSearch to ‘true’ to consider the term as a unique
          string (Space is not a delimiter).
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeSearchResults'
              example:
                searchLimit: 10
                size: 9
                results:
                - oid: 10251633
                  cultureCode: ww-en
                  name: HP 14 Women Canvas Tote
                  level: 5
                  status:
                  - L
                  highlightedName: HP 14 Women Canvas <b>Tote</b>
                - oid: 10251733
                  cultureCode: ww-en
                  name: HP 14 Women Tote
                  level: 5
                  status:
                  - L
                  highlightedName: HP 14 Women <b>Tote</b>
                - oid: 11747249
                  cultureCode: ww-en
                  name: HP 15.6 Women Canvas Tote
                  level: 5
                  status:
                  - L
                  highlightedName: HP 15.6 Women Canvas <b>Tote</b>
                - oid: 10251734
                  cultureCode: ww-en
                  name: HP 15.6 Women Premium Tote
                  level: 5
                  status:
                  - L
                  highlightedName: HP 15.6 Women Premium <b>Tote</b>
                - oid: 6463941
                  cultureCode: ww-en
                  name: HP Ladies Black Tote
                  level: 5
                  status:
                  - L
                  - O
                  highlightedName: HP Ladies Black <b>Tote</b>
                - oid: 6529922
                  cultureCode: ww-en
                  name: HP Ladies Brown Leather Tote
                  level: 5
                  status:
                  - L
                  highlightedName: HP Ladies Brown Leather <b>Tote</b>
                - oid: 5146170
                  cultureCode: ww-en
                  name: HP Ladies Lavender Tote
                  level: 5
                  status:
                  - L
                  highlightedName: HP Ladies Lavender <b>Tote</b>
                - oid: 3966031
                  cultureCode: ww-en
                  name: HP Professional Series Designer Tote
                  level: 5
                  status:
                  - L
                  - O
                  highlightedName: HP Professional Series Designer <b>Tote</b>
                - oid: 5353373
                  cultureCode: ww-en
                  name: Tote Horizontal Black Bag
                  level: 5
                  status:
                  - L
                  highlightedName: <b>Tote</b> Horizontal Black Bag
  /{cultureCode}/{oid}:
    get:
      tags:
      - catalog
      summary: Check oid existance
      description: ' Check if given oid exists with given statuses in given catalogs.
        If true, gets its path'
      parameters:
      - name: cultureCode
        in: path
        required: true
        schema:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
      - name: oid
        in: path
        required: true
        schema:
          type: string
      - name: status[]
        in: query
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - L
            - O
            - F
      responses:
        200:
          description: Found Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInCulture'
              example:
                oid: 10251633
                cultureCode: ww-en
                name: HP 14 Women Canvas Tote
                level: 5
                status:
                - L
                path:
                - oid: 8386448
                  cultureCode: ww-en
                  name: Accessories
                  level: 1
                  status:
                  - L
                  - O
                - oid: 70657
                  cultureCode: ww-en
                  name: Cases and Covers
                  level: 2
                  status:
                  - L
                  - O
                - oid: 342314
                  cultureCode: ww-en
                  name: Cases
                  level: 3
                  status:
                  - L
                  - O
                - oid: 219306
                  cultureCode: ww-en
                  name: Notebook PC Cases
                  level: 4
                  status:
                  - L
                  - O
        204:
          description: not found Response
          content: {}
  /{cultureCode}/oids/ppimage4online:
    post:
      tags:
      - contents
      summary: Get primary image for multiple nodes
      description: |
        Returns the primary product image for online purpose of multiple node according to given cultureCode and statuses.
      parameters:
      - name: cultureCode
        in: path
        required: true
        schema:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
      - name: status[]
        in: query
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - L
            - O
            - F
      - name: options[]
        in: query
        description: "Optional.\n\nfallback: \n- Apply fallback rules when no image\
          \ is available for the selected OID\nIf product (level 7) then search image\
          \ on the parent (level 6) and other similar products\nIf level 6, 5 and\
          \ 4 then search image on associated products"
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - fallback
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - oids[]
              properties:
                oids[]:
                  type: array
                  items:
                    type: integer
        required: true
      responses:
        200:
          description: Valid response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SKU_NodeInCultureWithContent_object'
              example:
                results:
                - oid: 6341976
                  metadata:
                    name: c03928701.png
                    fullTitle: HP 10W Tablet PC USB AC Adapter
                    contentType: png
                    dpiResolution: 72
                    background: Transparent
                    orientation: Center facing
                    pixelHeight: 430
                    pixelWidth: 573
                    imageUrlHttp: http://product-images.www8-hp.com/digmedialib/prodimg/lowres/c03928701.png
                    imageUrlHttps: https://ssl-product-images.www8-hp.com/digmedialib/prodimg/lowres/c03928701.png
                    fileSize: 67096
                    disclosureLevel: Public
                  image_urls:
                    http: http://product-images.www8-hp.com/digmedialib/prodimg/lowres/c03928701.png
                    https: https://ssl-product-images.www8-hp.com/digmedialib/prodimg/lowres/c03928701.png
                - oid: 5366018
                  metadata:
                    name: c03589559.png
                    fullTitle: HP Pavilion Sleekbook CTO 15-b000
                    contentType: png
                    dpiResolution: 72
                    background: Transparent
                    orientation: Center facing
                    pixelHeight: 430
                    pixelWidth: 573
                    imageUrlHttp: http://product-images.www8-hp.com/digmedialib/prodimg/lowres/c03589559.png
                    imageUrlHttps: https://ssl-product-images.www8-hp.com/digmedialib/prodimg/lowres/c03589559.png
                    fileSize: 986598
                    disclosureLevel: Public
                  image_urls:
                    http: http://product-images.www8-hp.com/digmedialib/prodimg/lowres/c03589559.png
                    https: https://ssl-product-images.www8-hp.com/digmedialib/prodimg/lowres/c03589559.png
                noResult: []
components:
  schemas:
    formData_prodNumsFormDataParam:
      type: array
      items:
        type: string
    formData_oidsFormDataParam:
      type: array
      items:
        type: integer
    Catalog:
      required:
      - countryCode
      - countryId
      - cultureCode
      - id
      - name
      - textDirection
      type: object
      properties:
        id:
          type: integer
        cultureCode:
          $ref: '#/components/schemas/cultureCode_type'
        name:
          type: string
        textDirection:
          type: string
        countryId:
          type: integer
        countryCode:
          type: string
    CatalogCollection:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Catalog'
    Labels:
      type: object
      additionalProperties:
        type: string
    LabelsCollection:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Labels'
    Termbase:
      type: object
      properties:
        culture_code:
          type: string
        term:
          type: string
        translated_term:
          type: string
    BaseNode:
      required:
      - level
      - name
      - oid
      type: object
      properties:
        oid:
          type: integer
        name:
          type: string
        productNumber:
          type: string
        level:
          type: integer
        codename:
          type: string
        productLine:
          type: string
        path:
          type: array
          items:
            $ref: '#/components/schemas/BasePathNode'
    BasePathNode:
      required:
      - level
      - name
      - oid
      type: object
      properties:
        oid:
          type: integer
        cultureCode:
          type: string
        name:
          type: string
        level:
          type: integer
        status:
          type: array
          items:
            $ref: '#/components/schemas/status_enum'
        codename:
          type: string
    NodeInCulture:
      allOf:
      - $ref: '#/components/schemas/BaseNode'
      - required:
        - cultureCode
        - status
        type: object
        properties:
          status:
            type: array
            items:
              $ref: '#/components/schemas/status_enum'
          cultureCode:
            $ref: '#/components/schemas/cultureCode_type'
    NodeInCultureWithChildren:
      allOf:
      - $ref: '#/components/schemas/NodeInCulture'
      - required:
        - children
        type: object
        properties:
          children:
            type: array
            items:
              $ref: '#/components/schemas/NodeInCulture'
    NodeInCultureWithContent:
      allOf:
      - $ref: '#/components/schemas/NodeInCulture'
      - required:
        - contents
        type: object
        properties:
          contents:
            $ref: '#/components/schemas/NodeContents'
    NodeWithTranslatedContents:
      allOf:
      - $ref: '#/components/schemas/NodeInCulture'
      - required:
        - translations
        type: object
        properties:
          translations:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/NodeTranslation'
    NodeTranslation:
      required:
      - contents
      - cultureCode
      - status
      - translatedName
      type: object
      properties:
        cultureCode:
          type: string
        translatedName:
          type: string
        status:
          type: array
          items:
            $ref: '#/components/schemas/status_enum'
        contents:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NodeContents'
    NodeProducts:
      required:
      - lastModificationDate
      - productNumbers
      - totalResults
      type: object
      properties:
        lastModificationDate:
          type: string
        totalResults:
          type: integer
        productNumbers:
          type: array
          items:
            type: string
    SKU_NodeInCultureWithContent_object:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/NodeInCultureWithContent'
      description: NodeInCultureWithContents mapped by sku number
    MatchingNodeInCulture:
      allOf:
      - $ref: '#/components/schemas/NodeInCulture'
      - type: object
        properties:
          highlightedName:
            type: string
          highlightedCodename:
            type: string
    NodeSearchResults:
      type: object
      properties:
        size:
          type: integer
        searchLimit:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/MatchingNodeInCulture'
    ConcreteContainersNodeContents:
      type: object
      additionalProperties:
        type: string
      description: Object<String,String>
    NodeImage:
      type: object
      properties:
        name:
          type: string
        fullTitle:
          type: string
        contentType:
          type: string
        documentTypeDetail:
          type: string
          description: Only available for multiple product content routes
        masterObjectName:
          type: string
          description: Only available for multiple product content routes
        dpiResolution:
          type: string
        background:
          type: string
        orientation:
          type: string
        pixelHeight:
          type: string
        pixelWidth:
          type: string
        imageUrlHttp:
          type: string
        imageUrlHttps:
          type: string
        languageCode:
          $ref: '#/components/schemas/languageCode_type'
        fileSize:
          type: integer
      description: An image from PDB
    NodeImages:
      $ref: '#/components/schemas/NodeImage'
    NodeDocument:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        type:
          type: string
        languageCode:
          $ref: '#/components/schemas/languageCode_type'
        fullTitle:
          type: string
      description: A document from PDB
    NodeDocuments:
      $ref: '#/components/schemas/NodeDocument'
    NodeVideos:
      $ref: '#/components/schemas/NodeVideo'
    NodeVideo:
      type: object
      properties:
        renditionId:
          type: string
        languageCode:
          type: string
        assetId:
          type: string
        assetTitle:
          type: string
        assetName:
          type: string
        assetCategory:
          type: string
        assetType:
          type: string
        url:
          type: string
        urlAssetHub:
          type: string
        brightCoveAccountName:
          type: string
        brightCoveAccountId:
          type: string
        brightCoveReferenceId:
          type: string
        fileSize:
          type: string
        keywords:
          type: array
          items:
            type: integer
      description: A video from PDB
    NodeMetaDatas:
      $ref: '#/components/schemas/NodeMetaData'
    NodeMetaData:
      type: object
      properties:
        pa_wr_date:
          type: string
        ga_date:
          type: string
        es_date:
          type: string
        blind_date:
          type: string
        otherCatalogs:
          $ref: '#/components/schemas/NodePLCCatalogs'
      description: A metadata from PDB like PLC Date
    NodePLCCatalogs:
      type: object
      properties:
        ($cultureCode):
          $ref: '#/components/schemas/NodePLC'
      description: A catalog node PLC
    NodePLC:
      type: object
      properties:
        cultureCode:
          type: string
        pa_wr_date:
          type: string
        ga_date:
          type: string
        es_date:
          type: string
        blind_date:
          type: string
        status:
          type: string
      description: A node PLC
    NodeRecommendedCompanions:
      $ref: '#/components/schemas/NodeRecommendedCompanion'
    NodeRecommendedCompanion:
      $ref: '#/components/schemas/NodeDSR'
    NodeDSR:
      type: object
      properties:
        linkId:
          type: string
        productNumber:
          type: string
        name:
          type: string
        recommended:
          type: boolean
        position:
          type: number
        status:
          type: array
          items:
            type: string
      description: A node DSR link
    NodeLinks:
      $ref: '#/components/schemas/NodeLinksByProductNumber'
    NodeLinksByProductNumber:
      $ref: '#/components/schemas/NodeLink'
    NodeLink:
      type: object
      properties:
        linkType:
          type: string
        recommended:
          type: boolean
        oid:
          type: number
        productNumber:
          type: string
        status:
          type: array
          items:
            type: string
        name:
          type: string
      description: A node link
    NodeHosts:
      $ref: '#/components/schemas/NodeHostsByProductNumber'
    NodeHostsByProductNumber:
      $ref: '#/components/schemas/NodeHost'
    NodeHost:
      type: object
      properties:
        linkType:
          type: string
        recommended:
          type: boolean
        oid:
          type: number
        productNumber:
          type: string
        status:
          type: array
          items:
            type: string
        level1:
          type: string
        name:
          type: string
      description: A node host
    NodeContents:
      type: object
      properties:
        MSG:
          $ref: '#/components/schemas/ConcreteContainersNodeContents'
        TSP:
          $ref: '#/components/schemas/ConcreteContainersNodeContents'
        SYS:
          $ref: '#/components/schemas/ConcreteContainersNodeContents'
        LOG:
          $ref: '#/components/schemas/ConcreteContainersNodeContents'
        PIC:
          $ref: '#/components/schemas/ConcreteContainersNodeContents'
        IMG:
          $ref: '#/components/schemas/NodeImages'
        DOC:
          $ref: '#/components/schemas/NodeDocuments'
        OTH:
          $ref: '#/components/schemas/ConcreteContainersNodeContents'
        LNK:
          $ref: '#/components/schemas/NodeLinks'
        HST:
          $ref: '#/components/schemas/NodeHosts'
        VID:
          $ref: '#/components/schemas/NodeVideos'
        MDA:
          $ref: '#/components/schemas/NodeMetaDatas'
        RC:
          $ref: '#/components/schemas/NodeRecommendedCompanions'
    cultureCode_type:
      pattern: ^([a-z]{2}-[a-z]{2})$
      type: string
    languageCode_type:
      pattern: ^([a-z]{2})$
      type: string
    status_enum:
      type: string
      enum:
      - L
      - O
      - F
    contentType_enum:
      type: string
      description: TSP for TechSpecs
      enum:
      - TSP
      - MSG
      - SYS
      - LOG
      - PIC
      - IMG
      - DOC
      - OTH
      - LNK
      - HST
      - VID
      - MDA
      - RC
    hierParadigm_enum:
      type: string
      enum:
      - F
      - Q
    searchMode_enum:
      type: string
      enum:
      - product
      - codename
    NodeRatings:
      required:
      - avg_rating
      - rating_range
      - recommended
      - total_review
      type: object
      properties:
        avg_rating:
          type: number
          format: float
        rating_range:
          type: integer
        total_review:
          type: integer
        recommended:
          type: integer
  parameters:
    cultureCodesQueryParam:
      name: cultureCodes[]
      in: query
      required: true
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          pattern: ^([a-z]{2}-[a-z]{2})$
          type: string
    nodeStatusQueryParam:
      name: status[]
      in: query
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
          enum:
          - L
          - O
          - F
    contentOptionsParam:
      name: options[]
      in: query
      description: "Optional.\n\nshowHostsSeries: \n- applicable for HST content type\
        \ only\n- use it to list series informations for HST"
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
          enum:
          - showHostSeries
    bestImageOptionsParam:
      name: options[]
      in: query
      description: "Optional.\n\nfallback: \n- Apply fallback rules when no image\
        \ is available for the selected OID\nIf product (level 7) then search image\
        \ on the parent (level 6) and other similar products\nIf level 6, 5 and 4\
        \ then search image on associated products"
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
          enum:
          - fallback
    hierParadigmQueryParam:
      name: hierarchyParadigm
      in: query
      required: true
      schema:
        type: string
        enum:
        - F
        - Q
    contentTypeQueryParam:
      name: contentType[]
      in: query
      required: true
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
          enum:
          - TSP
          - MSG
          - SYS
          - LOG
          - PIC
          - IMG
          - DOC
          - OTH
          - LNK
          - HST
          - VID
          - RAT
          - MDA
          - RC
    concreteContentTypeQueryParam:
      name: contentType[]
      in: query
      required: true
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
          enum:
          - TSP
          - MSG
          - SYS
          - LOG
          - PIC
          - OTH
    concreteContentTypeMultipleQueryParam:
      name: contentType[]
      in: query
      required: true
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
          enum:
          - TSP
          - MSG
          - SYS
          - LOG
          - PIC
          - IMG
          - DOC
          - OTH
          - RAT
          - MDA
    searchModeQueryParam:
      name: searchModes[]
      in: query
      required: true
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
          enum:
          - product
          - codename
    limitQueryParam:
      name: searchLimit
      in: query
      required: true
      schema:
        type: integer
    excludeEmptySeriesQueryParam:
      name: excludeEmptySeries
      in: query
      description: Enable to exclude empty series
      schema:
        type: boolean
        default: true
    searchOnTranslatedNameQueryParam:
      name: searchOnTranslatedName
      in: query
      description: Enable to search on default name ww-en (no parameter or false),
        or on translated name linked to culture code (true)
      schema:
        type: boolean
        default: false
    exactSearch:
      name: exactSearch
      in: query
      description: Set the exactSearch to ‘true’ to consider the term as a unique
        string (Space is not a delimiter).
      schema:
        type: boolean
        default: false
    pageNumberQueryParam:
      name: pageNumber
      in: query
      required: true
      schema:
        minimum: 1
        type: integer
    excludedBranchHeadOidsQueryParam:
      name: excludedBranchHeadOids[]
      in: query
      description: A list of parent OIDs to exclude. When a term-matching node is
        <i>under</i> one of the given OIDs, it is excluded. This parameters has a
        high priority than includedBranchHeadOids
      style: form
      explode: true
      schema:
        type: array
        items:
          type: integer
    includedBranchHeadOidsQueryParam:
      name: includedBranchHeadOids[]
      in: query
      description: A list of parent OIDs to restrict too. When a term-matching node
        is <i>under</i> one of the given OIDs, it is included (except if excluded
        due to excludedBranchHeadOids)
      style: form
      explode: true
      schema:
        type: array
        items:
          type: integer
    productPatternsQueryParam:
      name: productPatterns[]
      in: query
      description: "A list of regular expressions that restrict level 7 term-matching\
        \ nodes to the ones with product number matching one of the expressions. \n\
        \nE.g.: (DUM.*) include all level 7 nodes with product number starting with\
        \ \"DUM\" \n\n~(DUM.*) excludes all level 7 nodes with product number starting\
        \ with \"DUM\""
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    cultureCodePathParam:
      name: cultureCode
      in: path
      required: true
      schema:
        pattern: ^([a-z]{2}-[a-z]{2})$
        type: string
    productNumberPathParam:
      name: productNumber
      in: path
      required: true
      schema:
        pattern: ^[-a-zA-Z0-9_.+]*$
        type: string
    oidPathParam:
      name: oid
      in: path
      required: true
      schema:
        type: string
    termPathParam:
      name: term
      in: path
      required: true
      schema:
        type: string
    hidePath:
      name: hidePath
      in: query
      description: Enable to remove hierarchy of a product (path block)
      schema:
        type: boolean
        default: false
    filter:
      name: filter[]
      in: query
      description: "Optional. If you specify a filter for one content type you need\
        \ to specify for all selected content types. \n Path starts from the content\
        \ block. Separator for level is the pipe symbol |. Wildcard can be used (ex:\
        \ MSG|headline\\* returns content for all fields with name starts with headline)\
        \ (ex: MSG|\\* returns all content type data for MSG)"
      style: form
      explode: true
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
